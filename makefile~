#
# Makefile fÃ¶r kalkylatorn, nivÃ¥ G, GNU GCC (g++)
#
# Filkataloger dÃ¤r andra delar av programet finns.
EXPRESSION = ../Expression

# Diagnosmeddelanden frÃ¥n kompilatorn (g++) filtreras av gccfilter.
CCC = gccfilter -c -a g++

# Kompilatorflaggor, lÃ¤gg till '-g' om kompilering fÃ¶r avlusning ska gÃ¶ras.
CCFLAGS += -std=c++11 -Wpedantic -Wall -Wextra -Werror

# Preprocessorflaggor, -I lÃ¤gger till en filkatalog i inkluderingssÃ¶kvÃ¤gen.
CPPFLAGS += -I$(EXPRESSION)

# LÃ¤nkflaggor - Fix fÃ¶r att lÃ¶sa lokala problem med C++ lÃ¤nkbibliotek.
LDFLAGS  += -L/sw/gcc-$(GCC4_V)/lib -static-libstdc++

# Objektkodsmoduler som ingÃ¥r i den kompletta kalkylatorn.
OBJECTS = kalkylator.o Calculator.o Expression.o Expression_Tree.o

# HuvudmÃ¥l - skapas med kommandot 'make' eller 'make kalkylator'.
kalkylator: $(OBJECTS) Makefile
	$(CCC) $(CPPFLAGS) $(CCFLAGS) $(LDFLAGS) -o kalkylator $(OBJECTS)

# DelmÃ¥l (flaggan -c avbryter innan lÃ¤nkning, objektkodsfil erhÃ¥lls)
kalkylator.o: kalkylator.cc
	$(CCC) $(CPPFLAGS) $(CCFLAGS) -c kalkylator.cc

Calculator.o: Calculator.h Calculator.cc
	$(CCC) $(CPPFLAGS) $(CCFLAGS) -c Calculator.cc

Expression.o: $(EXPRESSION)/Expression.h $(EXPRESSION)/Expression.cc
	$(CCC) $(CPPFLAGS) $(CCFLAGS) -c $(EXPRESSION)/Expression.cc

Expression_Tree.o: $(EXPRESSION)/Expression_Tree.h $(EXPRESSION)/Expression_Tree.cc
	$(CCC) $(CPPFLAGS) $(CCFLAGS) -c $(EXPRESSION)/Expression_Tree.cc

# 'make clean' tar bort objektkodsfiler och 'core' (minnesdump).
clean:
	@ \rm -rf *.o *.gch core

# 'make zap' tar Ã¤ven bort det kÃ¶rbara programmet och reservkopior (filer
# som slutar med tecknet '~').
zap: clean
	@ \rm -rf kalkylator *~

# Se upp vid eventuell Ã¤ndring, '*' fÃ¥r absolut inte finnas fÃ¶r sig!!!
#
# '@' medfÃ¶r att kommandot inte skrivs ut pÃ¥ skÃ¤rmen dÃ¥ det utfÃ¶rs av make.
# 'rm' Ã¤r ett alias fÃ¶r 'rm -i' pÃ¥ IDA:s system, '\rm' innebÃ¤r att "original-
# versionen", utan flaggan '-i', anvÃ¤nds. 
